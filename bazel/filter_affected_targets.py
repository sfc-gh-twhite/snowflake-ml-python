"""A commandline tool to assemble a bazel query to filter affected targets generated by `bazel-diff`.

The following targets will be filtered:
  - source files
  - //external/...
Note: Please only import built-in libraries and do not introduce dependencies on third-party libraries,
as this program is run in a github action without `bazel build` or any 3rd-party Python package available.
"""

import argparse

_AFFECTED_TARGETS_QUERY_PATTERN = """
let raw_targets = set({raw_targets}) in
   $raw_targets - kind('source file', $raw_targets) - filter('//external[:/].*', $raw_targets)
"""

_AFFECTED_TESTS_QUERY_PATTERN = """
let raw_targets = set({raw_targets}) in
   kind('.*_test rule', $raw_targets) - filter('//external[:/].*', $raw_targets)
"""


def main(input_file: str, test_target_only: bool) -> None:
    with open(input_file) as f:
        raw_targets = f.read()
    pattern = _AFFECTED_TESTS_QUERY_PATTERN if test_target_only else _AFFECTED_TARGETS_QUERY_PATTERN
    print(pattern.format(raw_targets=raw_targets))


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        usage="%(prog)s [OPTION] INPUT_FILE", description="Assemble a bazel query to filter affected targets"
    )
    parser.add_argument("--test_targets_only", action="store_true", default=False)
    parser.add_argument("INPUT_FILE", nargs=1)
    args = parser.parse_args()
    main(args.INPUT_FILE[0], args.test_targets_only)
