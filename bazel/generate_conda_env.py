import sys
from typing import Dict, Iterable, List

from ruamel.yaml import YAML

from bazel import conda_env_utils

if __name__ == "__main__":

    if len(sys.argv) <= 1:
        raise ValueError("Must provide at least one conda env file.")

    yaml = YAML()
    yaml.indent(mapping=2, offset=2)

    def env_dict_generator(files: Iterable[str]) -> Iterable[Dict[str, List[str]]]:
        for f in files:
            yield yaml.load(open(f))

    merged_env_dict = conda_env_utils.merge_conda_envs(env_dict_generator(sys.argv[1:]))
    sys.stdout.writelines(
        [
            "# DO NOT EDIT!\n",
            "# Generated by //bazel:merge_conda_env\n",
            "# To update, run:\n",
            "# bazel build //bazel:conda-env.yml && cp bazel-bin/bazel/conda-env.yml .\n",
            "\n",
        ]
    )
    yaml.dump(merged_env_dict, sys.stdout)
