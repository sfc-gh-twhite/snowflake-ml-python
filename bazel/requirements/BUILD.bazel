load("//bazel:py_rules.bzl", "py_binary")
load("//snowflake/ml:version.bzl", "VERSION")
load("//bazel/requirements:rules.bzl", "generate_requirement_file", "generate_requirement_file_yaml", "sync_target")

package(default_visibility = ["//visibility:public"])

exports_files(["requirements.schema.json"])

py_binary(
    name = "parse_and_generate_requirements",
    srcs = ["parse_and_generate_requirements.py"],
)

_SRC_REQUIREMENT_FILE = "//:requirements.yml"

_CURRENT_PATH = "bazel/requirements"

_SYNC_RULE_NAME = "sync_requirements"

_SYNC_BAZEL_CMD = "bazel run //{current_path}:{sync_rule}".format(
    current_path = _CURRENT_PATH,
    sync_rule = _SYNC_RULE_NAME,
)

_GENERATED_REQUIREMENTS_FILES = {
    "requirements_txt": {
        "cmd": "--mode dev_version --format text",
        "generated": "requirements.txt",
        "target": "//:requirements.txt",
    },
    "conda_env_yml": {
        "cmd": "--mode dev_version --format conda_env",
        "generated": "conda-env.yml",
        "target": "//:conda-env.yml",
    },
    "conda_env_snowflake_yml": {
        "cmd": "--mode dev_version --format conda_env --snowflake_channel_only",
        "generated": "conda-env-snowflake.yml",
        "target": "//:conda-env-snowflake.yml",
    },
    "conda_meta": {
        "cmd": "--mode version_requirements --format conda_meta --version " + VERSION,
        "generated": "meta.yaml",
        "target": "//ci/conda_recipe:meta.yaml",
    },
    "requirements_bzl": {
        "cmd": "--mode version_requirements --format bzl",
        "generated": "requirements.bzl",
        "target": "//snowflake/ml:requirements.bzl",
    },
}

[
    generate_requirement_file(
        name = name,
        cmd = value["cmd"],
        generated_file = value["generated"],
        generation_cmd = _SYNC_BAZEL_CMD,
        src_requirement_file = _SRC_REQUIREMENT_FILE,
        target = value["target"],
    )
    for name, value in _GENERATED_REQUIREMENTS_FILES.items()
    if name != "conda_meta"
]

# Generate ci/conda-recipe/meta.yaml
generate_requirement_file_yaml(
    name = "conda_meta",
    cmd = _GENERATED_REQUIREMENTS_FILES["conda_meta"]["cmd"],
    generated_file = _GENERATED_REQUIREMENTS_FILES["conda_meta"]["generated"],
    generation_cmd = _SYNC_BAZEL_CMD,
    src_requirement_file = _SRC_REQUIREMENT_FILE,
    target = _GENERATED_REQUIREMENTS_FILES["conda_meta"]["target"],
    template_file = "//bazel/requirements/templates:meta.tpl.yaml",
)

# Generate the updater script so there's only one target for devs to run,
# even if many generated files are in the source folder.
sync_target(
    name = _SYNC_RULE_NAME,
    root_path = _CURRENT_PATH,
    targets = _GENERATED_REQUIREMENTS_FILES.values(),
)
