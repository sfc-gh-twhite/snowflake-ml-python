# Add requirements information here and use `bazel run //bazel/requirements:sync_requirements`
# to generate all other requirements files.
# Fields:
#   name: The name of the package. Set if it is available with the same name and required both in PyPI and conda.
#   name_pypi: The name of the package in PyPI. Set this only to indicate it is a requirements available in PyPI only,
#     or set this with name_conda to indicates that it has different name in PyPI and conda.
#   name_conda: The name of the package in conda. Set this only to indicate it is a requirements available in conda only,
#     or set this with name_pypi to indicates that it has different name in PyPI and conda.
#     At least 1 of these 3 fields should be set.
#
#   dev_version: The version of the package to be pinned in the dev environment.
#     Set if it is available with the same version and required both in PyPI and conda.
#   dev_version_pypi: The version from PyPI to be pinned in the dev environment. Set this only to indicate
#     it is a requirements available in PyPI only, or set this with dev_version_conda to indicates that
#     it has different version in PyPI and conda.
#   dev_version_conda: The version from conda to be pinned in the dev environment. Set this only to indicate
#     it is a requirements available in conda only, or set this with dev_version_pypi to indicates that
#     it has different version in PyPI and conda.
#   from_channel: Set this if the package is not available in Snowflake Anaconda Channel
#     (https://repo.anaconda.com/pkgs/snowflake). Each dependency must be accompanied with a JIRA ticket requesting it
#      to be added to the Snowflake channel.
#     At least 1 of these 3 fields should be set.
#
#   version_requirements: The version requirements specifiers when this requirement is a dependency of SnowML release.
#      Set if it is available with the same name and required both in PyPI and conda.
#   version_requirements_pypi: The version requirements specifiers when this requirement is a dependency of
#      SnowML release via PyPI. Set this only to indicate it is a requirements required by PyPI release only,
#      or set this with version_requirements_conda to indicates that it has different version in PyPI and conda.
#   version_requirements_conda: The version requirements specifiers when this requirement is a dependency of
#      SnowML release via conda. Set this only to indicate it is a requirements required by conda release only,
#      or set this with version_requirements_pypi to indicates that it has different version in PyPI and conda.
#     At least 1 of these 3 fields but be set to indicate that this package is a dependency of release.
#     If you don't want to constrain version, set the field to empty string.
#
#   requirements_extra_tags: PyPI release only. Set this to indicate the package is a extras dependency of the SnowML.
#     This requirements will be then added to all extras tags set here, and an all extras tag will be auto
#     generated to include all extras requirements. All extras requirements will be labeled as run_constrained in conda
#     meta.yaml.
#   tags: Set tag to to filter some of the requirements in some cases.

- name: absl-py
  dev_version: "1.3.0"
  version_requirements: ">=0.15,<2"
- name: anyio
  dev_version: "3.5.0"
  version_requirements: ">=3.5.0,<4"
  tags:
    - deployment_core
- name: boto3
  dev_version: "1.24.28"
- name_conda: conda-libmamba-solver
  dev_version_conda: "23.3.0"
  version_requirements_conda: ">=23.1.0,<24"
- name: cloudpickle
  dev_version: "2.0.0"
  version_requirements: ""
  tags:
    - deployment_core
- name: coverage
  dev_version: "6.3.2"
- name: flask-cors
  dev_version: "3.0.10"
- name: flask
  dev_version: "2.1.3"
- name_pypi: fsspec[http]
  name_conda: fsspec
  dev_version: "2022.11.0"
  version_requirements: ">=2022.11,<=2023.1"
- name: httpx
  dev_version: "0.23.0"
- name: inflection
  dev_version: "0.5.1"
- name: jsonschema
  dev_version: "3.2.0"
- name: joblib
  dev_version: "1.1.1"
- name: lightgbm
  dev_version: "3.3.5"
  version_requirements: "==3.3.5"
  requirements_extra_tags:
    - lightgbm
- name: moto
  dev_version: "4.0.11"
- name: mypy
  dev_version: "0.981"
- name: networkx
  dev_version: "2.8.4"
- name: numpy
  dev_version: "1.23.4"
  version_requirements: ">=1.23,<2"
  tags:
    - deployment_core
- name: packaging
  dev_version: "23.0"
  version_requirements: ">=20.9,<24"
  tags:
    - deployment_core
- name: pandas
  dev_version: "1.4.4"
  version_requirements: ">=1.0.0,<2"
  tags:
    - deployment_core
- name: pytest
  dev_version: "7.1.2"
- name_conda: python
  dev_version_conda: "3.8.13"
  version_requirements_conda: ""
- name_pypi: torch
  name_conda: pytorch
  dev_version: "1.13.1"
- name: pyyaml
  dev_version: "6.0"
  version_requirements: ">=6.0,<7"
  tags:
    - deployment_core
- name: ruamel.yaml
  dev_version: "0.17.21"
- name: s3fs
  dev_version: "2022.11.0"
- name: scikit-learn
  dev_version: "1.2.2"
  version_requirements: ">=1.2.1,<1.3"
- name: scipy
  dev_version: "1.9.3"
  version_requirements: ">=1.9,<2"
- name_conda: snowflake-connector-python
  name_pypi: snowflake-connector-python[pandas]
  dev_version: "3.0.3"
  version_requirements: ">=3.0.3,<4"
- name: snowflake-snowpark-python
  dev_version: "1.4.0"
  version_requirements: ">=1.4.0,<2"
  tags:
    - deployment_core
- name: starlette
  dev_version: "0.27.0"
  from_channel: conda-forge
- name: sqlparse
  dev_version: "0.4.3"
  version_requirements: ">=0.4,<1"
- name: tensorflow
  dev_version: "2.11.0"
  version_requirements: ">=2.9,<3"
  requirements_extra_tags:
    - tensorflow
- name: torchdata
  dev_version: "0.5.1"
  version_requirements: ">=0.4,<1"
  requirements_extra_tags:
    - torch
- name: transformers
  dev_version: "4.29.2"
- name: types-PyYAML
  dev_version: "6.0.12"
  from_channel: conda-forge
- name: typing-extensions
  dev_version: "4.5.0"
  version_requirements: ">=4.1.0,<5"
  tags:
    - deployment_core
- name: xgboost
  dev_version: "1.7.3"
  version_requirements: ">=1.7.3,<2"
