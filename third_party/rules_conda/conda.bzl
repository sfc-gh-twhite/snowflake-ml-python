load(":utils.bzl", "EXECUTE_TIMEOUT", "get_arch", "get_os")

# micromamba version
MICROMAMBA_VERSION = "1.5.1-0"

MICROMAMBA_SHA = {
    "linux": {
        "64": "056ad0be97dc540b2e321f65782384dc4e8004270c67ded1d059dc097fb86fd6",
        "aarch64": "96128bad4b68316f2157e9f653530c7b00374c8e375e18723f6843f5fa92a3e7",
        "ppc64le": "8875702b93730ac862895a9575f4df45633011cb969a3442381cb030641f383b",
    },
    "osx": {
        "64": "ae517b7b4a7938d74b58260c04d9f47bb00a30a79d71853245f35213114f9f30",
        "arm64": "5a483c5c83900e8d2decd4fd06c39260e54659b3e4947ebc93796537ac805307",
    },
    "win": {
        "64": "d4acb2dafd856a6677bcd629bdcdbc2d372f6c3405288e1831d5be53ce4c557f",
    },
}

MICROMAMBA_NAME_TEMPLATE = "{version}/micromamba-{os}-{arch}"
MICROMAMBA_BASE_URL = "https://github.com/mamba-org/micromamba-releases/releases/download/"

CONDA_BUILD_FILE_TEMPLATE = """# This file was automatically generated by rules_conda
exports_files(
    [
        '{conda}'
    ]
)
"""

# install micromamba
def _install_conda(rctx):
    rctx.report_progress("Installing micromamba")
    os = get_os(rctx)
    arch = get_arch(rctx)

    url = MICROMAMBA_BASE_URL + MICROMAMBA_NAME_TEMPLATE.format(version = MICROMAMBA_VERSION, os = os, arch = arch)
    sha = MICROMAMBA_SHA

    conda_entrypoint = "{}/micromamba".format(rctx.attr.conda_dir)

    # download from url to output
    rctx.download(
        url = url,
        output = conda_entrypoint,
        sha256 = sha[os][arch],
        executable = True,
    )

    return conda_entrypoint

# create BUILD file with exposed conda binary
def _create_conda_build_file(rctx, conda_entrypoint):
    conda = "{}/{}".format(rctx.attr.conda_dir, conda_entrypoint)
    rctx.file(
        "BUILD",
        content = CONDA_BUILD_FILE_TEMPLATE.format(conda = conda),
    )

def _load_conda_impl(rctx):
    conda_entrypoint = _install_conda(rctx)
    _create_conda_build_file(rctx, conda_entrypoint)

load_conda_rule = repository_rule(
    _load_conda_impl,
    attrs = {
        "conda_dir": attr.string(mandatory = True),
        "quiet": attr.bool(
            default = True,
            doc = "False if conda output should be shown",
        ),
        "timeout": attr.int(
            default = EXECUTE_TIMEOUT,
            doc = "Timeout in seconds for each execute action",
        ),
    },
)
