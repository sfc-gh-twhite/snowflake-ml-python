load(":utils.bzl", "CONDA_EXT_MAP", "EXECUTE_TIMEOUT", "INSTALLER_SCRIPT_EXT_MAP", "ENV_VAR_SEPARATOR_MAP", "PYTHON_EXT_MAP", "execute_waitable_windows", "get_arch", "get_os", "get_path_envar", "windowsify")

# libmamba version
LIBMAMBA_SOLVER_VERSION = "23.1.0"

# CONDA CONFIGURATION
CONDA_MAJOR = "3"
CONDA_MINOR = "py310_23.1.0-1"
CONDA_SHA = {
    "Windows": {
        "x86_64": "d4517212c8ac44fd8b5ccc2d4d9f38c2dd924c77a81c2be92c3a72e70dd3e907",
    },
    "MacOSX": {
        "x86_64": "bfb81814e16eb450b1dbde7b4ecb9ebc5186834cb4ede5926c699762ca69953b",
        "arm64": "cc5bcf95d5db0f7f454b2d800d52da8b70563f8454d529e7ac2da9725650eb27",
    },
    "Linux": {
        "x86_64": "32d73e1bc33fda089d7cd9ef4c1be542616bd8e437d1f77afeeaf7afdb019787",
        "aarch64": "80d6c306b015e1e3b01ea59dc66c676a81fa30279bc2da1f180a7ef7b2191d6e",
        "ppc64le": "9ca8077a0af8845fc574a120ef8d68690d7a9862d354a2a4468de5d2196f406c",
        "s390x": "0d00a9d34c5fd17d116bf4e7c893b7441a67c7a25416ede90289d87216104a97",
    },
}
CONDA_INSTALLER_NAME_TEMPLATE = "Miniconda{major}-{minor}-{os}-{arch}{ext}"
CONDA_BASE_URL = "https://repo.anaconda.com/miniconda/"

INSTALLER_DIR = "installer"
INSTALLER_FLAGS = {
    "Windows": ["/InstallationType=JustMe", "/AddToPath=0", "/RegisterPython=0", "/S", "/D={}"],
    "MacOSX": ["-b", "-f", "-p", "{}"],
    "Linux": ["-b", "-f", "-p", "{}"],
}

CONDA_BUILD_FILE_TEMPLATE = """# This file was automatically generated by rules_conda
exports_files(
    [
        '{conda}',
        '{python},
    ]
)
"""

def _get_installer_flags(rctx, dir):
    os = get_os(rctx)
    flags = INSTALLER_FLAGS[os]

    # insert directory
    dir = rctx.path(dir)
    if os == "Windows":
        dir = windowsify(dir)
    return flags[:-1] + [flags[-1].format(dir)]

# download conda installer
def _download_conda(rctx):
    rctx.report_progress("Downloading conda installer")
    os = get_os(rctx)
    arch = get_arch(rctx)
    ext = INSTALLER_SCRIPT_EXT_MAP[os]

    url = CONDA_BASE_URL + CONDA_INSTALLER_NAME_TEMPLATE.format(major = CONDA_MAJOR, minor = CONDA_MINOR, os = os, arch = arch, ext = ext)
    sha = CONDA_SHA

    output = "{}/install{}".format(INSTALLER_DIR, ext)

    # download from url to output
    rctx.download(
        url = url,
        output = output,
        sha256 = sha[os][arch],
        executable = True,
    )
    return output

# install conda locally
def _install_conda(rctx, installer):
    rctx.report_progress("Installing conda")
    os = get_os(rctx)
    installer_flags = _get_installer_flags(rctx, rctx.attr.conda_dir)

    path_envar = get_path_envar(rctx)

    args = [rctx.path(installer)] + installer_flags

    # Strip environment variables when installing conda to make sure
    # any activated conda environment would not affect the installer.
    # Also, since the installer writes to $HOME which breaks hermecity, we make it
    # write to the repo dir.
    install_conda_env = {
        "HOME": rctx.attr.conda_dir,
        "PATH": path_envar
    }

    # execute installer with flags adjusted to OS
    if os == "Windows":
        install_conda_env.update({"CONDA_DLL_SEARCH_MODIFICATION_ENABLE": ""})
        # TODO: fix always returning 0
        # it seems that either miniconda installer returns 0 even on failure or the wrapper does something wrong
        # also stdout and stderr are always empty
        result = execute_waitable_windows(rctx, args, quiet = rctx.attr.quiet, environment = install_conda_env, timeout = rctx.attr.timeout)
    else:
        result = rctx.execute(args, quiet = rctx.attr.quiet, environment = install_conda_env, timeout = rctx.attr.timeout)

    if result.return_code:
        fail("Failure installing conda.\nstdout: {}\nstderr: {}".format(result.stdout, result.stderr))

    # The conda entrypoint has a shebang line that usually points to the python in the installation
    # however, if that shebang line were be too long (>127), conda would fallback to rely on
    # PATH. This is problematic because we do not have a reliable way to manipulate PATH.
    # Therefore, we expose the python interpreter (thus the right bin/ path) so that later invocations
    # of the conda command can setup the right PATH env.
    conda_entrypoint = rctx.path("{}/condabin/conda{}".format(rctx.attr.conda_dir, CONDA_EXT_MAP[os]))
    python_executable = "python{}".format(PYTHON_EXT_MAP[os])
    interpreter_path = python_executable if os == "Windows" else "bin/{}".format(python_executable)
    python = rctx.path("{}/{}".format(
        rctx.attr.conda_dir,
        interpreter_path,
    ))
    additional_paths = [str(rctx.path(python).dirname)]
    if os == "Windows":
        additional_paths = additional_paths + [str(rctx.path("{}/Library/bin".format(rctx.attr.conda_dir)))]
    additional_paths = additional_paths + [path_envar]
    actual_environment = {"HOME": rctx.attr.conda_dir, "PATH": ENV_VAR_SEPARATOR_MAP[os].join(additional_paths)}

    # install mamba solver.
    install_mamba_result = rctx.execute(
        [
            conda_entrypoint,
            "install",
            "-n",
            "base",
            "conda-libmamba-solver={}".format(LIBMAMBA_SOLVER_VERSION),
            "-y",
        ],
        quiet = rctx.attr.quiet,
        working_directory = rctx.attr.conda_dir,
        environment = actual_environment,
        timeout = rctx.attr.timeout,
    )

    if install_mamba_result.return_code:
        print("Failure installing conda-libmamba-solver.")
        print("stdout: \n", result.stdout)
        print("stderr: \n", result.stderr)
        fail("Failure installing conda-libmamba-solver.")

    return conda_entrypoint, python

# create BUILD file with exposed conda binary
def _create_conda_build_file(rctx, conda_entrypoint, conda_base_python):
    conda = "{}/{}".format(rctx.attr.conda_dir, conda_entrypoint)
    python = "{}/{}".format(rctx.attr.conda_dir, conda_base_python)
    rctx.file(
        "BUILD",
        content = CONDA_BUILD_FILE_TEMPLATE.format(conda = conda, python = python),
    )

def _load_conda_impl(rctx):
    installer = _download_conda(rctx)
    conda_entrypoint, conda_base_python = _install_conda(rctx, installer)
    _create_conda_build_file(rctx, conda_entrypoint, conda_base_python)

load_conda_rule = repository_rule(
    _load_conda_impl,
    attrs = {
        "conda_dir": attr.string(mandatory = True),
        "quiet": attr.bool(
            default = True,
            doc = "False if conda output should be shown",
        ),
        "timeout": attr.int(
            default = EXECUTE_TIMEOUT,
            doc = "Timeout in seconds for each execute action",
        ),
    },
)
